#!/usr/bin/env python3
import sys
import pdf2image ## third party module https://pypi.org/project/pdf2image/
import os.path
import tempfile ## module to create temporary files 
import shutil ## module to move files etc
import subprocess

tmppath=tempfile.gettempdir()+"/" ## get temporary file path from OS
cwd = os.getcwd()+"/" ## get current working directory

arg=sys.argv ## get command line argument
argl=len(arg) ## get number of arguments

if(argl<3): ## minimum two arguments
    print("Syntax: pdfappendix <pdffile> <text to print on first page>")
    sys,exit(1) ## exit code 1, if too few arguments

pdfn=arg[1] ## read first argument, name of PDF-file
text=arg[2] ## read second argument, text to add

if not(os.path.isfile(pdfn)): ## check if input file exists
    print("File "+pdfn+" not found")
    sys.exit(1) ## exit code 1, if file doesn't exist

filename, file_extension = os.path.splitext(pdfn) # get file name and extension

if (file_extension.lower()!=".pdf"): # error message if not PDF extension
    print("File must be of .pdf type, which "+pdfn+" is not, but "+file_extension.lower()+".")
    sys.exit(1) ## exit code 1, if wrong extension

htmls="<html><head></head><body><h3 align='right'>{}</h3></body></html>".format(text)

tfl=open(tmppath+"tmp__.html","w+") # create a simple HTML file with the text do add
n=tfl.write(htmls)
tfl.close()


subprocess.Popen("htmldoc --webpage --footer ...  -f "+tmppath+"tmp__.pdf "+tmppath+"tmp__.html > /dev/null 2>&1", shell=True).wait()

## htmldoc creates a temporary PDF file from the HTML file, which contains the text to be added to the original PDF

img = pdf2image.convert_from_path(tmppath+"tmp__.pdf",fmt="png",transparent=True)

## pdf2image converts the temporary PDF file to a transparent PNG file

img[0].save(tmppath+"tmp__.png","PNG")

shellstr="pdfstamp \""+pdfn+ "\" -i "+tmppath+"tmp__.png -l 160,290"

subprocess.Popen(shellstr, shell=True).wait()

## pdfstamp stamps the PNG image onto the first page of the PDF file to process
## Note, pdfstamp must be installed, which in turn requires Java to be installed
## https://github.com/CrossRef/pdfstamp
## There also needs to exist an executable shell wrapper in PATH called "pdfstamp" with the following two lines:
## #!/usr/bin/env bash
## java -jar {/PUT CORRECT PATH HERE/}pdfstamp.jar $@
##
## The coordinates for the stamped text are declared last in the command -> (160,290) - upper right corner
## To do: add functionality for the user to choose coordinates from command line

shutil.move(cwd+filename+"_stamped.pdf",cwd+filename+"_.pdf")
## save the modified output PDF as the original file name with an underscore added at the end
## To do: add functionality to choose the output file name

os.remove(tmppath+"tmp__.pdf")
os.remove(tmppath+"tmp__.png")
os.remove(tmppath+"tmp__.html")

## clean up temporary filoes
